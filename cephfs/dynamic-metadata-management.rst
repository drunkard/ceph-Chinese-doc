=======================
 CephFS 动态元数据管理
=======================
.. CephFS Dynamic Metadata Management

元数据操作通常占所有文件系统操作的 50% 以上。此外，与存储的扩展相比
（ I/O 吞吐量也随着它线性地扩展），元数据的扩展方式更为复杂。
这是由于文件系统元数据具有分层和相互依存的天性。因此，在 CephFS 中，
元数据载荷与数据载荷分离，以避免给 RADOS 集群带来不必要的压力。
因此，元数据由元数据服务器（ MDS ）集群处理。
CephFS 把元数据分配给各 MDS 处理，用的是\
`动态子树分区技术 <https://ceph.com/assets/pdfs/weil-mds-sc04.pdf>`_\ 。

动态子树分区
------------
.. Dynamic Subtree Partitioning

在传统的子树分区中，文件系统层次结构的子树被分配给各个（相互独立的） MDS 。
这种元数据分布策略提供了良好的层次局部化、缓存的线性增长和\
跨 MDS 的横向扩展，以及跨 MDS 时元数据相当好的分布。

.. image:: subtree-partitioning.svg

传统子树分区的问题在于，
载荷的深度增长（跨单个 MDS）会导致活动热点。
这导致纵向扩展性的缺乏、以及非繁忙资源/ MDS 的浪费。

这个问题导致我们采用了一种更加动态的方式来处理元数据：
“动态子树分区（ Dynamic Subtree Partitioning ）”，
将目录层次结构中负载密集的部分从繁忙的 MDS 迁移到不忙的 MDS 。

这种策略可确保活动热点在出现后能得到缓解，
因此在横向扩展之上，还实现了元数据载荷的纵向扩展。


子树迁移期间的导出过程
----------------------
.. Export Process During Subtree Migration

一旦导出者确认可以导出子树
（集群没降级、子树根目录没冻结），
子树根目录将被临时锁定（ auth pinned ）、然后冻结子树，
而后导出者将全力迁移子树，
除非在此期间导入者或者它自身发生故障。

二者将交换 MExportDiscover 消息，是为了确保正在导出的目录，
它的上一级 inode 在目标节点上是打开的。
导入程序会把它锁定，以防止它被清理掉。
这个机制会一直持续，直到导出者完成子树冻结、
导入者能够复制必要的元数据。
当导出者收到 MDiscoverAck 时，
它会去掉临时锁定，允许冻结继续进行。

只有在导入者和导出者以外的其他节点打开了子树基目录时，
才会出现警告阶段。如果没有，
那就意味着子树内或子树嵌套的下级都没有元数据\
正在被导入者和导出者以外的其他节点复制。
如果是，那么会有一条 MExportWarning 消息通知\
所有旁观者这个区域的权威暂时不明确，
并将导出者和导入者都列为权威 MDS 节点。特别是，
正在从它们的缓存中清理项目的旁观者必须\
同时向新、旧权威节点发送 MCacheExpire 消息。
这样做是必要的，可以确保即使导入者或导出者出现故障，
幸存的权威节点也能可靠地接收到所有过期信息。
子树被冻结后（在导入者和导出者上），
过期的不会被马上处理；相反，它们会被排进队列，
直到这个区域解冻，并能够确定这个节点是不是权威的。

然后，导出程序会打包一条 MExport 消息，
其中包含子树的所有元数据、并将对象标记为非权威对象。
MExport 消息会将实际的子树元数据发送给导入者。
导入程序收到后，会将数据插入其缓存、
将所有对象标记为权威对象，并把所有元数据的一份副本\
记录到一条 EImportStart 日志消息中。
安全地刷回后，它会回复一条 MExportAck 。
现在，导出程序可以记录一条 EExport 日志条目，
最终记录导出成功了。在出现故障时，
只有 EExport 条目存在，才能在恢复过程中明确权威。

一旦记录完成，导出者将向所有旁观者发送 MExportNotify ，
通知他们，权威不再模糊，
缓存过期消息应该只发送给新权威（导入者）。
这些通知被确认并反馈给导出者后，
导出者就会清空旁观者到导出者的消息流中杂散的过期通知，
然后解冻子树，清理与迁移相关的状态，
并向导入者发送最终的 MExportFinish 。
导入者收到后，会记录一个 EImportFinish(true)
（在本地记录导出确实成功了），解冻它的子树，
处理队列里的所有缓存过期，
并清理其状态。
